Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list | EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial ->  Type-specifier #saveType #setForceDeclarationFlag ID #startNoPush #pid #endNoPush #unsetForceDeclarationFlag
Declaration-prime -> Fun-declaration-prime | Var-declaration-prime #zeroInitialize #voidCheckThrow
Var-declaration-prime -> ; | [ NUM #pnum ] #declareArray ; 
Fun-declaration-prime -> ( #declareFunction #openScope #setFunctionScopeFlag Params ) Compound-stmt #jumpBack
Type-specifier -> int | void #voidCheck
Params -> int #saveType #setForceDeclarationFlag ID #pid #unsetForceDeclarationFlag Param-prime #popParam Param-list | void
Param-list -> , Param Param-list | EPSILON
Param -> Declaration-initial Param-prime #popParam
Param-prime -> [  ] #arrayParam | EPSILON
Compound-stmt -> { #openScope Declaration-list Statement-list #closeScope }
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression #pop ; | break #break ; | ;
Selection-stmt -> if ( #startRHS Expression #endRHS ) #save Statement Else-stmt
Else-stmt -> endif #jpfFromSaved | else #saveAndJpfFromLastSave Statement endif #jpFromSaved
Iteration-stmt -> repeat #label #startBreakScope Statement until ( #startRHS Expression #endRHS ) #until #handleBreaks
Return-stmt -> return #startRHS Return-stmt-prime #endRHS #jumpBack
Return-stmt-prime -> ; | Expression #setReturnValue ;
Expression -> Simple-expression-zegond | ID #checkDeclaration #pid #uncheckDeclaration #checkType B
B -> = #startRHS Expression #assign #endRHS | [ #startRHS Expression #endRHS ] #array H | Simple-expression-prime
H -> = #startRHS Expression #assign #endRHS | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #execute | EPSILON
Relop -> < #pushOperation | == #pushOperation
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #execute D | EPSILON
Addop -> + #pushOperation | - #pushOperation
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> * #pushOperation Factor #execute G | EPSILON
Factor -> ( #startRHS Expression #endRHS ) | ID #checkDeclaration #pid #uncheckDeclaration Var-call-prime | NUM #pnum
Var-call-prime -> ( #startArgumentList Args #endArgumentList ) #call | Var-prime
Var-prime -> [ #startRHS Expression #endRHS ] #array | EPSILON
Factor-prime -> ( #startArgumentList Args #endArgumentList ) #call | EPSILON
Factor-zegond -> ( #startRHS Expression #endRHS ) | NUM #pnum
Args -> Arg-list | EPSILON
Arg-list -> Expression #addArgumentCount Arg-list-prime
Arg-list-prime -> , Expression #addArgumentCount Arg-list-prime | EPSILON