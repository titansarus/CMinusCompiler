Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list | EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial ->  Type-specifier ID #pid
Declaration-prime -> Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime -> ; | [ NUM #pnum ] #array ; 
Fun-declaration-prime -> ( Params ) Compound-stmt
Type-specifier -> int | void
Params -> int ID #pid Param-prime Param-list | void
Param-list -> , Param Param-list | EPSILON
Param -> Declaration-initial Param-prime #popparam
Param-prime -> [  ] #array | EPSILON
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression ; | break #break ; | ;
Selection-stmt -> if ( Expression ) #save Statement Else-stmt
Else-stmt -> endif #jpf-from-saved | else #save-and-jpf-from-last-save Statement endif #jp-from-saved
Iteration-stmt -> repeat #save #label Statement until ( Expression ) #until
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ; | Expression ;
Expression -> Simple-expression-zegond | ID #pid B
B -> = Expression | [ Expression ] #array H | Simple-expression-prime
H -> = Expression | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #execute | EPSILON
Relop -> < #push_operation | == #push_operation
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #execute D | EPSILON
Addop -> + #push_operation | - #push_operation
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> * #push_operation Factor #execute G | EPSILON
Factor -> ( Expression ) | ID #pid Var-call-prime | NUM #pnum
Var-call-prime -> ( #start_argument_list Args #end_argument_list ) | Var-prime
Var-prime -> [ Expression ] #array | EPSILON
Factor-prime -> ( #start_argument_list Args #end_argument_list ) | EPSILON
Factor-zegond -> ( Expression ) | NUM #pnum
Args -> Arg-list | EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime | EPSILON